// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package mapper

import (
	"fmt"
	domain "github.com/cromerc/projectBase/internal/v3/domain"
	api "github.com/cromerc/projectBase/internal/v3/port/api"
)

type PortMapper struct{}

func (c *PortMapper) UserDomainToPort(source domain.User) api.User {
	var apiUser api.User
	pString := source.Email()
	apiUser.Email = &pString
	pString2 := source.FirstName()
	apiUser.FirstName = &pString2
	pInt64 := source.ID()
	apiUser.ID = &pInt64
	pString3 := source.LastName()
	apiUser.LastName = &pString3
	pString4 := source.Password()
	apiUser.Password = &pString4
	pString5 := source.Phone()
	apiUser.Phone = &pString5
	pString6 := source.Username()
	apiUser.Username = &pString6
	return apiUser
}
func (c *PortMapper) UserPortToDomain(source api.User) (domain.User, error) {
	return userPortToDomain(c, source)
}
func (c *PortMapper) UsersDomainToPort(source []domain.User) []api.User {
	var apiUserList []api.User
	if source != nil {
		apiUserList = make([]api.User, len(source))
		for i := 0; i < len(source); i++ {
			apiUserList[i] = c.UserDomainToPort(source[i])
		}
	}
	return apiUserList
}
func (c *PortMapper) UsersPortToDomain(source []api.User) ([]domain.User, error) {
	var domainUserList []domain.User
	if source != nil {
		domainUserList = make([]domain.User, len(source))
		for i := 0; i < len(source); i++ {
			domainUser, err := userPortToDomain(c, source[i])
			if err != nil {
				return nil, fmt.Errorf("error setting index %d: %w", i, err)
			}
			domainUserList[i] = domainUser
		}
	}
	return domainUserList, nil
}
