// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Finds Pets by status
	// (GET /pet/findByStatus)
	FindPetsByStatus(w http.ResponseWriter, r *http.Request, params FindPetsByStatusParams)
	// Finds Pets by tags
	// (GET /pet/findByTags)
	FindPetsByTags(w http.ResponseWriter, r *http.Request, params FindPetsByTagsParams)
	// Deletes a pet
	// (DELETE /pet/{petId})
	DeletePet(w http.ResponseWriter, r *http.Request, petID int64, params DeletePetParams)
	// Find pet by ID
	// (GET /pet/{petId})
	GetPetByID(w http.ResponseWriter, r *http.Request, petID int64)
	// Updates a pet in the store with form data
	// (POST /pet/{petId})
	UpdatePetWithForm(w http.ResponseWriter, r *http.Request, petID int64, params UpdatePetWithFormParams)
	// uploads an image
	// (POST /pet/{petId}/uploadImage)
	UploadFile(w http.ResponseWriter, r *http.Request, petID int64, params UploadFileParams)
	// Add a new pet to the store
	// (POST /pets)
	AddPet(w http.ResponseWriter, r *http.Request)
	// Update an existing pet
	// (PUT /pets)
	UpdatePet(w http.ResponseWriter, r *http.Request)
	// Returns pet inventories by status
	// (GET /store/inventory)
	GetInventory(w http.ResponseWriter, r *http.Request)
	// Place an order for a pet
	// (POST /store/order)
	PlaceOrder(w http.ResponseWriter, r *http.Request)
	// Delete purchase order by ID
	// (DELETE /store/order/{orderId})
	DeleteOrder(w http.ResponseWriter, r *http.Request, orderID int64)
	// Find purchase order by ID
	// (GET /store/order/{orderId})
	GetOrderByID(w http.ResponseWriter, r *http.Request, orderID int64)
	// Create user
	// (POST /user)
	CreateUser(w http.ResponseWriter, r *http.Request)
	// Creates list of users with given input array
	// (POST /user/createWithList)
	CreateUsersWithListInput(w http.ResponseWriter, r *http.Request)
	// Logs user into the system
	// (GET /user/login)
	LoginUser(w http.ResponseWriter, r *http.Request, params LoginUserParams)
	// Logs out current logged in user session
	// (GET /user/logout)
	LogoutUser(w http.ResponseWriter, r *http.Request)
	// Delete user
	// (DELETE /user/{username})
	DeleteUser(w http.ResponseWriter, r *http.Request, username string)
	// Get user by user name
	// (GET /user/{username})
	GetUserByName(w http.ResponseWriter, r *http.Request, username string)
	// Update user
	// (PUT /user/{username})
	UpdateUser(w http.ResponseWriter, r *http.Request, username string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Finds Pets by status
// (GET /pet/findByStatus)
func (_ Unimplemented) FindPetsByStatus(w http.ResponseWriter, r *http.Request, params FindPetsByStatusParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Finds Pets by tags
// (GET /pet/findByTags)
func (_ Unimplemented) FindPetsByTags(w http.ResponseWriter, r *http.Request, params FindPetsByTagsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Deletes a pet
// (DELETE /pet/{petId})
func (_ Unimplemented) DeletePet(w http.ResponseWriter, r *http.Request, petID int64, params DeletePetParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Find pet by ID
// (GET /pet/{petId})
func (_ Unimplemented) GetPetByID(w http.ResponseWriter, r *http.Request, petID int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Updates a pet in the store with form data
// (POST /pet/{petId})
func (_ Unimplemented) UpdatePetWithForm(w http.ResponseWriter, r *http.Request, petID int64, params UpdatePetWithFormParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// uploads an image
// (POST /pet/{petId}/uploadImage)
func (_ Unimplemented) UploadFile(w http.ResponseWriter, r *http.Request, petID int64, params UploadFileParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add a new pet to the store
// (POST /pets)
func (_ Unimplemented) AddPet(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update an existing pet
// (PUT /pets)
func (_ Unimplemented) UpdatePet(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Returns pet inventories by status
// (GET /store/inventory)
func (_ Unimplemented) GetInventory(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Place an order for a pet
// (POST /store/order)
func (_ Unimplemented) PlaceOrder(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete purchase order by ID
// (DELETE /store/order/{orderId})
func (_ Unimplemented) DeleteOrder(w http.ResponseWriter, r *http.Request, orderID int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Find purchase order by ID
// (GET /store/order/{orderId})
func (_ Unimplemented) GetOrderByID(w http.ResponseWriter, r *http.Request, orderID int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create user
// (POST /user)
func (_ Unimplemented) CreateUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Creates list of users with given input array
// (POST /user/createWithList)
func (_ Unimplemented) CreateUsersWithListInput(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Logs user into the system
// (GET /user/login)
func (_ Unimplemented) LoginUser(w http.ResponseWriter, r *http.Request, params LoginUserParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Logs out current logged in user session
// (GET /user/logout)
func (_ Unimplemented) LogoutUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete user
// (DELETE /user/{username})
func (_ Unimplemented) DeleteUser(w http.ResponseWriter, r *http.Request, username string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get user by user name
// (GET /user/{username})
func (_ Unimplemented) GetUserByName(w http.ResponseWriter, r *http.Request, username string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update user
// (PUT /user/{username})
func (_ Unimplemented) UpdateUser(w http.ResponseWriter, r *http.Request, username string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// FindPetsByStatus operation middleware
func (siw *ServerInterfaceWrapper) FindPetsByStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, Petstore_authScopes, []string{"write:pets", "read:pets"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsByStatusParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindPetsByStatus(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// FindPetsByTags operation middleware
func (siw *ServerInterfaceWrapper) FindPetsByTags(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, Petstore_authScopes, []string{"write:pets", "read:pets"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsByTagsParams

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", r.URL.Query(), &params.Tags)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tags", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindPetsByTags(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeletePet operation middleware
func (siw *ServerInterfaceWrapper) DeletePet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "petId" -------------
	var petID int64

	err = runtime.BindStyledParameterWithOptions("simple", "petId", chi.URLParam(r, "petId"), &petID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "petId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Petstore_authScopes, []string{"write:pets", "read:pets"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params DeletePetParams

	headers := r.Header

	// ------------- Optional header parameter "api_key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("api_key")]; found {
		var APIKey string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "api_key", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "api_key", valueList[0], &APIKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "api_key", Err: err})
			return
		}

		params.APIKey = &APIKey

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePet(w, r, petID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPetByID operation middleware
func (siw *ServerInterfaceWrapper) GetPetByID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "petId" -------------
	var petID int64

	err = runtime.BindStyledParameterWithOptions("simple", "petId", chi.URLParam(r, "petId"), &petID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "petId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Api_keyScopes, []string{})

	ctx = context.WithValue(ctx, Petstore_authScopes, []string{"write:pets", "read:pets"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPetByID(w, r, petID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdatePetWithForm operation middleware
func (siw *ServerInterfaceWrapper) UpdatePetWithForm(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "petId" -------------
	var petID int64

	err = runtime.BindStyledParameterWithOptions("simple", "petId", chi.URLParam(r, "petId"), &petID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "petId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Petstore_authScopes, []string{"write:pets", "read:pets"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdatePetWithFormParams

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdatePetWithForm(w, r, petID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UploadFile operation middleware
func (siw *ServerInterfaceWrapper) UploadFile(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "petId" -------------
	var petID int64

	err = runtime.BindStyledParameterWithOptions("simple", "petId", chi.URLParam(r, "petId"), &petID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "petId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Petstore_authScopes, []string{"write:pets", "read:pets"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params UploadFileParams

	// ------------- Optional query parameter "additionalMetadata" -------------

	err = runtime.BindQueryParameter("form", true, false, "additionalMetadata", r.URL.Query(), &params.AdditionalMetadata)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "additionalMetadata", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UploadFile(w, r, petID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AddPet operation middleware
func (siw *ServerInterfaceWrapper) AddPet(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, Petstore_authScopes, []string{"write:pets", "read:pets"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddPet(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdatePet operation middleware
func (siw *ServerInterfaceWrapper) UpdatePet(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, Petstore_authScopes, []string{"write:pets", "read:pets"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdatePet(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetInventory operation middleware
func (siw *ServerInterfaceWrapper) GetInventory(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, Api_keyScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetInventory(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PlaceOrder operation middleware
func (siw *ServerInterfaceWrapper) PlaceOrder(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PlaceOrder(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteOrder operation middleware
func (siw *ServerInterfaceWrapper) DeleteOrder(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "orderId" -------------
	var orderID int64

	err = runtime.BindStyledParameterWithOptions("simple", "orderId", chi.URLParam(r, "orderId"), &orderID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteOrder(w, r, orderID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetOrderByID operation middleware
func (siw *ServerInterfaceWrapper) GetOrderByID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "orderId" -------------
	var orderID int64

	err = runtime.BindStyledParameterWithOptions("simple", "orderId", chi.URLParam(r, "orderId"), &orderID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOrderByID(w, r, orderID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateUsersWithListInput operation middleware
func (siw *ServerInterfaceWrapper) CreateUsersWithListInput(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUsersWithListInput(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LoginUser operation middleware
func (siw *ServerInterfaceWrapper) LoginUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LoginUserParams

	// ------------- Optional query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, false, "username", r.URL.Query(), &params.Username)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	// ------------- Optional query parameter "password" -------------

	err = runtime.BindQueryParameter("form", true, false, "password", r.URL.Query(), &params.Password)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "password", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoginUser(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LogoutUser operation middleware
func (siw *ServerInterfaceWrapper) LogoutUser(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LogoutUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithOptions("simple", "username", chi.URLParam(r, "username"), &username, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUser(w, r, username)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUserByName operation middleware
func (siw *ServerInterfaceWrapper) GetUserByName(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithOptions("simple", "username", chi.URLParam(r, "username"), &username, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserByName(w, r, username)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithOptions("simple", "username", chi.URLParam(r, "username"), &username, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateUser(w, r, username)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/pet/findByStatus", wrapper.FindPetsByStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/pet/findByTags", wrapper.FindPetsByTags)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/pet/{petId}", wrapper.DeletePet)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/pet/{petId}", wrapper.GetPetByID)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/pet/{petId}", wrapper.UpdatePetWithForm)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/pet/{petId}/uploadImage", wrapper.UploadFile)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/pets", wrapper.AddPet)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/pets", wrapper.UpdatePet)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/store/inventory", wrapper.GetInventory)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/store/order", wrapper.PlaceOrder)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/store/order/{orderId}", wrapper.DeleteOrder)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/store/order/{orderId}", wrapper.GetOrderByID)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/user", wrapper.CreateUser)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/user/createWithList", wrapper.CreateUsersWithListInput)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user/login", wrapper.LoginUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user/logout", wrapper.LogoutUser)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/user/{username}", wrapper.DeleteUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user/{username}", wrapper.GetUserByName)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/user/{username}", wrapper.UpdateUser)
	})

	return r
}

type FindPetsByStatusRequestObject struct {
	Params FindPetsByStatusParams
}

type FindPetsByStatusResponseObject interface {
	VisitFindPetsByStatusResponse(w http.ResponseWriter) error
}

type FindPetsByStatus200JSONResponse []Pet

func (response FindPetsByStatus200JSONResponse) VisitFindPetsByStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FindPetsByStatus200ApplicationXMLResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response FindPetsByStatus200ApplicationXMLResponse) VisitFindPetsByStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/xml")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type FindPetsByStatus400Response struct {
}

func (response FindPetsByStatus400Response) VisitFindPetsByStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type FindPetsByTagsRequestObject struct {
	Params FindPetsByTagsParams
}

type FindPetsByTagsResponseObject interface {
	VisitFindPetsByTagsResponse(w http.ResponseWriter) error
}

type FindPetsByTags200JSONResponse []Pet

func (response FindPetsByTags200JSONResponse) VisitFindPetsByTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FindPetsByTags200ApplicationXMLResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response FindPetsByTags200ApplicationXMLResponse) VisitFindPetsByTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/xml")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type FindPetsByTags400Response struct {
}

func (response FindPetsByTags400Response) VisitFindPetsByTagsResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeletePetRequestObject struct {
	PetID  int64 `json:"petId"`
	Params DeletePetParams
}

type DeletePetResponseObject interface {
	VisitDeletePetResponse(w http.ResponseWriter) error
}

type DeletePet400Response struct {
}

func (response DeletePet400Response) VisitDeletePetResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetPetByIDRequestObject struct {
	PetID int64 `json:"petId"`
}

type GetPetByIDResponseObject interface {
	VisitGetPetByIDResponse(w http.ResponseWriter) error
}

type GetPetByID200JSONResponse Pet

func (response GetPetByID200JSONResponse) VisitGetPetByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPetByID200ApplicationXMLResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response GetPetByID200ApplicationXMLResponse) VisitGetPetByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/xml")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetPetByID400Response struct {
}

func (response GetPetByID400Response) VisitGetPetByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetPetByID404Response struct {
}

func (response GetPetByID404Response) VisitGetPetByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UpdatePetWithFormRequestObject struct {
	PetID  int64 `json:"petId"`
	Params UpdatePetWithFormParams
}

type UpdatePetWithFormResponseObject interface {
	VisitUpdatePetWithFormResponse(w http.ResponseWriter) error
}

type UpdatePetWithForm405Response struct {
}

func (response UpdatePetWithForm405Response) VisitUpdatePetWithFormResponse(w http.ResponseWriter) error {
	w.WriteHeader(405)
	return nil
}

type UploadFileRequestObject struct {
	PetID  int64 `json:"petId"`
	Params UploadFileParams
	Body   io.Reader
}

type UploadFileResponseObject interface {
	VisitUploadFileResponse(w http.ResponseWriter) error
}

type UploadFile200JSONResponse APIResponse

func (response UploadFile200JSONResponse) VisitUploadFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AddPetRequestObject struct {
	JSONBody     *AddPetJSONRequestBody
	FormdataBody *AddPetFormdataRequestBody
	Body         io.Reader
}

type AddPetResponseObject interface {
	VisitAddPetResponse(w http.ResponseWriter) error
}

type AddPet200JSONResponse Pet

func (response AddPet200JSONResponse) VisitAddPetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AddPet200ApplicationXMLResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response AddPet200ApplicationXMLResponse) VisitAddPetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/xml")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type AddPet405Response struct {
}

func (response AddPet405Response) VisitAddPetResponse(w http.ResponseWriter) error {
	w.WriteHeader(405)
	return nil
}

type UpdatePetRequestObject struct {
	JSONBody     *UpdatePetJSONRequestBody
	FormdataBody *UpdatePetFormdataRequestBody
	Body         io.Reader
}

type UpdatePetResponseObject interface {
	VisitUpdatePetResponse(w http.ResponseWriter) error
}

type UpdatePet200JSONResponse Pet

func (response UpdatePet200JSONResponse) VisitUpdatePetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePet200ApplicationXMLResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response UpdatePet200ApplicationXMLResponse) VisitUpdatePetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/xml")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type UpdatePet400Response struct {
}

func (response UpdatePet400Response) VisitUpdatePetResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type UpdatePet404Response struct {
}

func (response UpdatePet404Response) VisitUpdatePetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UpdatePet405Response struct {
}

func (response UpdatePet405Response) VisitUpdatePetResponse(w http.ResponseWriter) error {
	w.WriteHeader(405)
	return nil
}

type GetInventoryRequestObject struct {
}

type GetInventoryResponseObject interface {
	VisitGetInventoryResponse(w http.ResponseWriter) error
}

type GetInventory200JSONResponse map[string]int32

func (response GetInventory200JSONResponse) VisitGetInventoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PlaceOrderRequestObject struct {
	JSONBody     *PlaceOrderJSONRequestBody
	FormdataBody *PlaceOrderFormdataRequestBody
	Body         io.Reader
}

type PlaceOrderResponseObject interface {
	VisitPlaceOrderResponse(w http.ResponseWriter) error
}

type PlaceOrder200JSONResponse Order

func (response PlaceOrder200JSONResponse) VisitPlaceOrderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PlaceOrder405Response struct {
}

func (response PlaceOrder405Response) VisitPlaceOrderResponse(w http.ResponseWriter) error {
	w.WriteHeader(405)
	return nil
}

type DeleteOrderRequestObject struct {
	OrderID int64 `json:"orderId"`
}

type DeleteOrderResponseObject interface {
	VisitDeleteOrderResponse(w http.ResponseWriter) error
}

type DeleteOrder400Response struct {
}

func (response DeleteOrder400Response) VisitDeleteOrderResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteOrder404Response struct {
}

func (response DeleteOrder404Response) VisitDeleteOrderResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetOrderByIDRequestObject struct {
	OrderID int64 `json:"orderId"`
}

type GetOrderByIDResponseObject interface {
	VisitGetOrderByIDResponse(w http.ResponseWriter) error
}

type GetOrderByID200JSONResponse Order

func (response GetOrderByID200JSONResponse) VisitGetOrderByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetOrderByID200ApplicationXMLResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response GetOrderByID200ApplicationXMLResponse) VisitGetOrderByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/xml")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetOrderByID400Response struct {
}

func (response GetOrderByID400Response) VisitGetOrderByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetOrderByID404Response struct {
}

func (response GetOrderByID404Response) VisitGetOrderByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type CreateUserRequestObject struct {
	JSONBody     *CreateUserJSONRequestBody
	FormdataBody *CreateUserFormdataRequestBody
	Body         io.Reader
}

type CreateUserResponseObject interface {
	VisitCreateUserResponse(w http.ResponseWriter) error
}

type CreateUserdefaultJSONResponse struct {
	Body       User
	StatusCode int
}

func (response CreateUserdefaultJSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateUserdefaultApplicationXMLResponse struct {
	Body          io.Reader
	StatusCode    int
	ContentLength int64
}

func (response CreateUserdefaultApplicationXMLResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/xml")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(response.StatusCode)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type CreateUsersWithListInputRequestObject struct {
	Body *CreateUsersWithListInputJSONRequestBody
}

type CreateUsersWithListInputResponseObject interface {
	VisitCreateUsersWithListInputResponse(w http.ResponseWriter) error
}

type CreateUsersWithListInput200JSONResponse User

func (response CreateUsersWithListInput200JSONResponse) VisitCreateUsersWithListInputResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateUsersWithListInput200ApplicationXMLResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response CreateUsersWithListInput200ApplicationXMLResponse) VisitCreateUsersWithListInputResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/xml")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type CreateUsersWithListInputdefaultResponse struct {
	StatusCode int
}

func (response CreateUsersWithListInputdefaultResponse) VisitCreateUsersWithListInputResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type LoginUserRequestObject struct {
	Params LoginUserParams
}

type LoginUserResponseObject interface {
	VisitLoginUserResponse(w http.ResponseWriter) error
}

type LoginUser200ResponseHeaders struct {
	XExpiresAfter time.Time
	XRateLimit    int32
}

type LoginUser200JSONResponse struct {
	Body    string
	Headers LoginUser200ResponseHeaders
}

func (response LoginUser200JSONResponse) VisitLoginUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-Expires-After", fmt.Sprint(response.Headers.XExpiresAfter))
	w.Header().Set("X-Rate-Limit", fmt.Sprint(response.Headers.XRateLimit))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type LoginUser200ApplicationXMLResponse struct {
	Body          io.Reader
	Headers       LoginUser200ResponseHeaders
	ContentLength int64
}

func (response LoginUser200ApplicationXMLResponse) VisitLoginUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/xml")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("X-Expires-After", fmt.Sprint(response.Headers.XExpiresAfter))
	w.Header().Set("X-Rate-Limit", fmt.Sprint(response.Headers.XRateLimit))
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type LoginUser400Response struct {
}

func (response LoginUser400Response) VisitLoginUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type LogoutUserRequestObject struct {
}

type LogoutUserResponseObject interface {
	VisitLogoutUserResponse(w http.ResponseWriter) error
}

type LogoutUserdefaultResponse struct {
	StatusCode int
}

func (response LogoutUserdefaultResponse) VisitLogoutUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type DeleteUserRequestObject struct {
	Username string `json:"username"`
}

type DeleteUserResponseObject interface {
	VisitDeleteUserResponse(w http.ResponseWriter) error
}

type DeleteUser400Response struct {
}

func (response DeleteUser400Response) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteUser404Response struct {
}

func (response DeleteUser404Response) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetUserByNameRequestObject struct {
	Username string `json:"username"`
}

type GetUserByNameResponseObject interface {
	VisitGetUserByNameResponse(w http.ResponseWriter) error
}

type GetUserByName200JSONResponse User

func (response GetUserByName200JSONResponse) VisitGetUserByNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserByName200ApplicationXMLResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response GetUserByName200ApplicationXMLResponse) VisitGetUserByNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/xml")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetUserByName400Response struct {
}

func (response GetUserByName400Response) VisitGetUserByNameResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetUserByName404Response struct {
}

func (response GetUserByName404Response) VisitGetUserByNameResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UpdateUserRequestObject struct {
	Username     string `json:"username"`
	JSONBody     *UpdateUserJSONRequestBody
	FormdataBody *UpdateUserFormdataRequestBody
	Body         io.Reader
}

type UpdateUserResponseObject interface {
	VisitUpdateUserResponse(w http.ResponseWriter) error
}

type UpdateUserdefaultResponse struct {
	StatusCode int
}

func (response UpdateUserdefaultResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Finds Pets by status
	// (GET /pet/findByStatus)
	FindPetsByStatus(ctx context.Context, request FindPetsByStatusRequestObject) (FindPetsByStatusResponseObject, error)
	// Finds Pets by tags
	// (GET /pet/findByTags)
	FindPetsByTags(ctx context.Context, request FindPetsByTagsRequestObject) (FindPetsByTagsResponseObject, error)
	// Deletes a pet
	// (DELETE /pet/{petId})
	DeletePet(ctx context.Context, request DeletePetRequestObject) (DeletePetResponseObject, error)
	// Find pet by ID
	// (GET /pet/{petId})
	GetPetByID(ctx context.Context, request GetPetByIDRequestObject) (GetPetByIDResponseObject, error)
	// Updates a pet in the store with form data
	// (POST /pet/{petId})
	UpdatePetWithForm(ctx context.Context, request UpdatePetWithFormRequestObject) (UpdatePetWithFormResponseObject, error)
	// uploads an image
	// (POST /pet/{petId}/uploadImage)
	UploadFile(ctx context.Context, request UploadFileRequestObject) (UploadFileResponseObject, error)
	// Add a new pet to the store
	// (POST /pets)
	AddPet(ctx context.Context, request AddPetRequestObject) (AddPetResponseObject, error)
	// Update an existing pet
	// (PUT /pets)
	UpdatePet(ctx context.Context, request UpdatePetRequestObject) (UpdatePetResponseObject, error)
	// Returns pet inventories by status
	// (GET /store/inventory)
	GetInventory(ctx context.Context, request GetInventoryRequestObject) (GetInventoryResponseObject, error)
	// Place an order for a pet
	// (POST /store/order)
	PlaceOrder(ctx context.Context, request PlaceOrderRequestObject) (PlaceOrderResponseObject, error)
	// Delete purchase order by ID
	// (DELETE /store/order/{orderId})
	DeleteOrder(ctx context.Context, request DeleteOrderRequestObject) (DeleteOrderResponseObject, error)
	// Find purchase order by ID
	// (GET /store/order/{orderId})
	GetOrderByID(ctx context.Context, request GetOrderByIDRequestObject) (GetOrderByIDResponseObject, error)
	// Create user
	// (POST /user)
	CreateUser(ctx context.Context, request CreateUserRequestObject) (CreateUserResponseObject, error)
	// Creates list of users with given input array
	// (POST /user/createWithList)
	CreateUsersWithListInput(ctx context.Context, request CreateUsersWithListInputRequestObject) (CreateUsersWithListInputResponseObject, error)
	// Logs user into the system
	// (GET /user/login)
	LoginUser(ctx context.Context, request LoginUserRequestObject) (LoginUserResponseObject, error)
	// Logs out current logged in user session
	// (GET /user/logout)
	LogoutUser(ctx context.Context, request LogoutUserRequestObject) (LogoutUserResponseObject, error)
	// Delete user
	// (DELETE /user/{username})
	DeleteUser(ctx context.Context, request DeleteUserRequestObject) (DeleteUserResponseObject, error)
	// Get user by user name
	// (GET /user/{username})
	GetUserByName(ctx context.Context, request GetUserByNameRequestObject) (GetUserByNameResponseObject, error)
	// Update user
	// (PUT /user/{username})
	UpdateUser(ctx context.Context, request UpdateUserRequestObject) (UpdateUserResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// FindPetsByStatus operation middleware
func (sh *strictHandler) FindPetsByStatus(w http.ResponseWriter, r *http.Request, params FindPetsByStatusParams) {
	var request FindPetsByStatusRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.FindPetsByStatus(ctx, request.(FindPetsByStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FindPetsByStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(FindPetsByStatusResponseObject); ok {
		if err := validResponse.VisitFindPetsByStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// FindPetsByTags operation middleware
func (sh *strictHandler) FindPetsByTags(w http.ResponseWriter, r *http.Request, params FindPetsByTagsParams) {
	var request FindPetsByTagsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.FindPetsByTags(ctx, request.(FindPetsByTagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FindPetsByTags")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(FindPetsByTagsResponseObject); ok {
		if err := validResponse.VisitFindPetsByTagsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeletePet operation middleware
func (sh *strictHandler) DeletePet(w http.ResponseWriter, r *http.Request, petID int64, params DeletePetParams) {
	var request DeletePetRequestObject

	request.PetID = petID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePet(ctx, request.(DeletePetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeletePetResponseObject); ok {
		if err := validResponse.VisitDeletePetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPetByID operation middleware
func (sh *strictHandler) GetPetByID(w http.ResponseWriter, r *http.Request, petID int64) {
	var request GetPetByIDRequestObject

	request.PetID = petID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPetByID(ctx, request.(GetPetByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPetByID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPetByIDResponseObject); ok {
		if err := validResponse.VisitGetPetByIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdatePetWithForm operation middleware
func (sh *strictHandler) UpdatePetWithForm(w http.ResponseWriter, r *http.Request, petID int64, params UpdatePetWithFormParams) {
	var request UpdatePetWithFormRequestObject

	request.PetID = petID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdatePetWithForm(ctx, request.(UpdatePetWithFormRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdatePetWithForm")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdatePetWithFormResponseObject); ok {
		if err := validResponse.VisitUpdatePetWithFormResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UploadFile operation middleware
func (sh *strictHandler) UploadFile(w http.ResponseWriter, r *http.Request, petID int64, params UploadFileParams) {
	var request UploadFileRequestObject

	request.PetID = petID
	request.Params = params

	request.Body = r.Body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UploadFile(ctx, request.(UploadFileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UploadFile")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UploadFileResponseObject); ok {
		if err := validResponse.VisitUploadFileResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AddPet operation middleware
func (sh *strictHandler) AddPet(w http.ResponseWriter, r *http.Request) {
	var request AddPetRequestObject

	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/json") {

		var body AddPetJSONRequestBody
		if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
			sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
			return
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if err := r.ParseForm(); err != nil {
			sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode formdata: %w", err))
			return
		}
		var body AddPetFormdataRequestBody
		if err := runtime.BindForm(&body, r.Form, nil, nil); err != nil {
			sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't bind formdata: %w", err))
			return
		}
		request.FormdataBody = &body
	}
	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/xml") {
		request.Body = r.Body
	}

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AddPet(ctx, request.(AddPetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddPet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AddPetResponseObject); ok {
		if err := validResponse.VisitAddPetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdatePet operation middleware
func (sh *strictHandler) UpdatePet(w http.ResponseWriter, r *http.Request) {
	var request UpdatePetRequestObject

	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/json") {

		var body UpdatePetJSONRequestBody
		if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
			sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
			return
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if err := r.ParseForm(); err != nil {
			sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode formdata: %w", err))
			return
		}
		var body UpdatePetFormdataRequestBody
		if err := runtime.BindForm(&body, r.Form, nil, nil); err != nil {
			sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't bind formdata: %w", err))
			return
		}
		request.FormdataBody = &body
	}
	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/xml") {
		request.Body = r.Body
	}

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdatePet(ctx, request.(UpdatePetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdatePet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdatePetResponseObject); ok {
		if err := validResponse.VisitUpdatePetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetInventory operation middleware
func (sh *strictHandler) GetInventory(w http.ResponseWriter, r *http.Request) {
	var request GetInventoryRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetInventory(ctx, request.(GetInventoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetInventory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetInventoryResponseObject); ok {
		if err := validResponse.VisitGetInventoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PlaceOrder operation middleware
func (sh *strictHandler) PlaceOrder(w http.ResponseWriter, r *http.Request) {
	var request PlaceOrderRequestObject

	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/json") {

		var body PlaceOrderJSONRequestBody
		if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
			sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
			return
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if err := r.ParseForm(); err != nil {
			sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode formdata: %w", err))
			return
		}
		var body PlaceOrderFormdataRequestBody
		if err := runtime.BindForm(&body, r.Form, nil, nil); err != nil {
			sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't bind formdata: %w", err))
			return
		}
		request.FormdataBody = &body
	}
	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/xml") {
		request.Body = r.Body
	}

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PlaceOrder(ctx, request.(PlaceOrderRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PlaceOrder")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PlaceOrderResponseObject); ok {
		if err := validResponse.VisitPlaceOrderResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteOrder operation middleware
func (sh *strictHandler) DeleteOrder(w http.ResponseWriter, r *http.Request, orderID int64) {
	var request DeleteOrderRequestObject

	request.OrderID = orderID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteOrder(ctx, request.(DeleteOrderRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteOrder")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteOrderResponseObject); ok {
		if err := validResponse.VisitDeleteOrderResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetOrderByID operation middleware
func (sh *strictHandler) GetOrderByID(w http.ResponseWriter, r *http.Request, orderID int64) {
	var request GetOrderByIDRequestObject

	request.OrderID = orderID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetOrderByID(ctx, request.(GetOrderByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOrderByID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetOrderByIDResponseObject); ok {
		if err := validResponse.VisitGetOrderByIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateUser operation middleware
func (sh *strictHandler) CreateUser(w http.ResponseWriter, r *http.Request) {
	var request CreateUserRequestObject

	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/json") {

		var body CreateUserJSONRequestBody
		if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
			sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
			return
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if err := r.ParseForm(); err != nil {
			sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode formdata: %w", err))
			return
		}
		var body CreateUserFormdataRequestBody
		if err := runtime.BindForm(&body, r.Form, nil, nil); err != nil {
			sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't bind formdata: %w", err))
			return
		}
		request.FormdataBody = &body
	}
	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/xml") {
		request.Body = r.Body
	}

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateUser(ctx, request.(CreateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateUserResponseObject); ok {
		if err := validResponse.VisitCreateUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateUsersWithListInput operation middleware
func (sh *strictHandler) CreateUsersWithListInput(w http.ResponseWriter, r *http.Request) {
	var request CreateUsersWithListInputRequestObject

	var body CreateUsersWithListInputJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateUsersWithListInput(ctx, request.(CreateUsersWithListInputRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateUsersWithListInput")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateUsersWithListInputResponseObject); ok {
		if err := validResponse.VisitCreateUsersWithListInputResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// LoginUser operation middleware
func (sh *strictHandler) LoginUser(w http.ResponseWriter, r *http.Request, params LoginUserParams) {
	var request LoginUserRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.LoginUser(ctx, request.(LoginUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LoginUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LoginUserResponseObject); ok {
		if err := validResponse.VisitLoginUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// LogoutUser operation middleware
func (sh *strictHandler) LogoutUser(w http.ResponseWriter, r *http.Request) {
	var request LogoutUserRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.LogoutUser(ctx, request.(LogoutUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LogoutUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LogoutUserResponseObject); ok {
		if err := validResponse.VisitLogoutUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteUser operation middleware
func (sh *strictHandler) DeleteUser(w http.ResponseWriter, r *http.Request, username string) {
	var request DeleteUserRequestObject

	request.Username = username

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUser(ctx, request.(DeleteUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteUserResponseObject); ok {
		if err := validResponse.VisitDeleteUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUserByName operation middleware
func (sh *strictHandler) GetUserByName(w http.ResponseWriter, r *http.Request, username string) {
	var request GetUserByNameRequestObject

	request.Username = username

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUserByName(ctx, request.(GetUserByNameRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUserByName")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUserByNameResponseObject); ok {
		if err := validResponse.VisitGetUserByNameResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateUser operation middleware
func (sh *strictHandler) UpdateUser(w http.ResponseWriter, r *http.Request, username string) {
	var request UpdateUserRequestObject

	request.Username = username
	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/json") {

		var body UpdateUserJSONRequestBody
		if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
			sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
			return
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if err := r.ParseForm(); err != nil {
			sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode formdata: %w", err))
			return
		}
		var body UpdateUserFormdataRequestBody
		if err := runtime.BindForm(&body, r.Form, nil, nil); err != nil {
			sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't bind formdata: %w", err))
			return
		}
		request.FormdataBody = &body
	}
	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/xml") {
		request.Body = r.Body
	}

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateUser(ctx, request.(UpdateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateUserResponseObject); ok {
		if err := validResponse.VisitUpdateUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
