// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all TODO tasks
	// (GET /todo)
	GetAllTODOTasks(w http.ResponseWriter, r *http.Request)
	// Create a new TODO task
	// (POST /todo)
	CreateTODO(w http.ResponseWriter, r *http.Request)
	// Delete user
	// (DELETE /user/{username})
	DeleteUser(w http.ResponseWriter, r *http.Request, username string)
	// Get user by user name
	// (GET /user/{username})
	GetUserByName(w http.ResponseWriter, r *http.Request, username string)
	// Update user
	// (PUT /user/{username})
	UpdateUser(w http.ResponseWriter, r *http.Request, username string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get all TODO tasks
// (GET /todo)
func (_ Unimplemented) GetAllTODOTasks(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new TODO task
// (POST /todo)
func (_ Unimplemented) CreateTODO(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete user
// (DELETE /user/{username})
func (_ Unimplemented) DeleteUser(w http.ResponseWriter, r *http.Request, username string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get user by user name
// (GET /user/{username})
func (_ Unimplemented) GetUserByName(w http.ResponseWriter, r *http.Request, username string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update user
// (PUT /user/{username})
func (_ Unimplemented) UpdateUser(w http.ResponseWriter, r *http.Request, username string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAllTODOTasks operation middleware
func (siw *ServerInterfaceWrapper) GetAllTODOTasks(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllTODOTasks(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateTODO operation middleware
func (siw *ServerInterfaceWrapper) CreateTODO(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, Petstore_authScopes, []string{"write:pets", "read:pets"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTODO(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithOptions("simple", "username", chi.URLParam(r, "username"), &username, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUser(w, r, username)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUserByName operation middleware
func (siw *ServerInterfaceWrapper) GetUserByName(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithOptions("simple", "username", chi.URLParam(r, "username"), &username, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserByName(w, r, username)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithOptions("simple", "username", chi.URLParam(r, "username"), &username, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateUser(w, r, username)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/todo", wrapper.GetAllTODOTasks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/todo", wrapper.CreateTODO)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/user/{username}", wrapper.DeleteUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user/{username}", wrapper.GetUserByName)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/user/{username}", wrapper.UpdateUser)
	})

	return r
}

type GetAllTODOTasksRequestObject struct {
}

type GetAllTODOTasksResponseObject interface {
	VisitGetAllTODOTasksResponse(w http.ResponseWriter) error
}

type GetAllTODOTasks200JSONResponse TODOs

func (response GetAllTODOTasks200JSONResponse) VisitGetAllTODOTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllTODOTasks501Response struct {
}

func (response GetAllTODOTasks501Response) VisitGetAllTODOTasksResponse(w http.ResponseWriter) error {
	w.WriteHeader(501)
	return nil
}

type CreateTODORequestObject struct {
	Body *CreateTODOJSONRequestBody
}

type CreateTODOResponseObject interface {
	VisitCreateTODOResponse(w http.ResponseWriter) error
}

type CreateTODO200JSONResponse TODO

func (response CreateTODO200JSONResponse) VisitCreateTODOResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateTODO405Response struct {
}

func (response CreateTODO405Response) VisitCreateTODOResponse(w http.ResponseWriter) error {
	w.WriteHeader(405)
	return nil
}

type CreateTODO501Response struct {
}

func (response CreateTODO501Response) VisitCreateTODOResponse(w http.ResponseWriter) error {
	w.WriteHeader(501)
	return nil
}

type DeleteUserRequestObject struct {
	Username string `json:"username"`
}

type DeleteUserResponseObject interface {
	VisitDeleteUserResponse(w http.ResponseWriter) error
}

type DeleteUser400Response struct {
}

func (response DeleteUser400Response) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteUser404Response struct {
}

func (response DeleteUser404Response) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type DeleteUser501Response struct {
}

func (response DeleteUser501Response) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(501)
	return nil
}

type GetUserByNameRequestObject struct {
	Username string `json:"username"`
}

type GetUserByNameResponseObject interface {
	VisitGetUserByNameResponse(w http.ResponseWriter) error
}

type GetUserByName200JSONResponse User

func (response GetUserByName200JSONResponse) VisitGetUserByNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserByName400Response struct {
}

func (response GetUserByName400Response) VisitGetUserByNameResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetUserByName404Response struct {
}

func (response GetUserByName404Response) VisitGetUserByNameResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetUserByName501Response struct {
}

func (response GetUserByName501Response) VisitGetUserByNameResponse(w http.ResponseWriter) error {
	w.WriteHeader(501)
	return nil
}

type UpdateUserRequestObject struct {
	Username string `json:"username"`
	Body     *UpdateUserJSONRequestBody
}

type UpdateUserResponseObject interface {
	VisitUpdateUserResponse(w http.ResponseWriter) error
}

type UpdateUser501Response struct {
}

func (response UpdateUser501Response) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(501)
	return nil
}

type UpdateUserdefaultResponse struct {
	StatusCode int
}

func (response UpdateUserdefaultResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get all TODO tasks
	// (GET /todo)
	GetAllTODOTasks(ctx context.Context, request GetAllTODOTasksRequestObject) (GetAllTODOTasksResponseObject, error)
	// Create a new TODO task
	// (POST /todo)
	CreateTODO(ctx context.Context, request CreateTODORequestObject) (CreateTODOResponseObject, error)
	// Delete user
	// (DELETE /user/{username})
	DeleteUser(ctx context.Context, request DeleteUserRequestObject) (DeleteUserResponseObject, error)
	// Get user by user name
	// (GET /user/{username})
	GetUserByName(ctx context.Context, request GetUserByNameRequestObject) (GetUserByNameResponseObject, error)
	// Update user
	// (PUT /user/{username})
	UpdateUser(ctx context.Context, request UpdateUserRequestObject) (UpdateUserResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetAllTODOTasks operation middleware
func (sh *strictHandler) GetAllTODOTasks(w http.ResponseWriter, r *http.Request) {
	var request GetAllTODOTasksRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllTODOTasks(ctx, request.(GetAllTODOTasksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllTODOTasks")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAllTODOTasksResponseObject); ok {
		if err := validResponse.VisitGetAllTODOTasksResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateTODO operation middleware
func (sh *strictHandler) CreateTODO(w http.ResponseWriter, r *http.Request) {
	var request CreateTODORequestObject

	var body CreateTODOJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateTODO(ctx, request.(CreateTODORequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateTODO")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateTODOResponseObject); ok {
		if err := validResponse.VisitCreateTODOResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteUser operation middleware
func (sh *strictHandler) DeleteUser(w http.ResponseWriter, r *http.Request, username string) {
	var request DeleteUserRequestObject

	request.Username = username

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUser(ctx, request.(DeleteUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteUserResponseObject); ok {
		if err := validResponse.VisitDeleteUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUserByName operation middleware
func (sh *strictHandler) GetUserByName(w http.ResponseWriter, r *http.Request, username string) {
	var request GetUserByNameRequestObject

	request.Username = username

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUserByName(ctx, request.(GetUserByNameRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUserByName")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUserByNameResponseObject); ok {
		if err := validResponse.VisitGetUserByNameResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateUser operation middleware
func (sh *strictHandler) UpdateUser(w http.ResponseWriter, r *http.Request, username string) {
	var request UpdateUserRequestObject

	request.Username = username

	var body UpdateUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateUser(ctx, request.(UpdateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateUserResponseObject); ok {
		if err := validResponse.VisitUpdateUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xW3W7cNhN9FYLfdylI68QpAl01sYvCKBAXiH1lLAJaHK2YSByWHK2jGnr3Ykjtr9aF",
	"E9hAb2ytSM7POXMO9Sgr7BxasBRk+Sg9/NVDoI+oDcQXN9eX1/y/QktgiR+Vc62pFBm0xdeAlt+FqoFO",
	"8dP/PdSylP8rdoGLtBqKGGwcx0xqCJU3jmPIMiYReP8VKpK8Ou3fz+88OvA0VXVw/FHCd9W5FmQpL3cL",
	"AmtBDQhS4ZsgFBplJmlwvC2QN3Ylx0wafRDgbJHJGn2nSJbSWPrlfHfIWIIVeD5lVQeHiW/+JcuYRVyN",
	"By3Lu3T4EILl9swGhSx2Hps1BF14HrTbMMp7NfDv2wB+jt9LdX3ReBPEhccO/HP7dg0S3vo2nOiauYeq",
	"94aGz9xYqlY58+UbDLFwHpcGlI75UkHb9V33zvwBsX0HFAg9fFE9NRygbvEhQdDxFJs00T016M3fcaZv",
	"fcs5iFwoi2ITIA8ParUCnxsskPcXm0PcU6jQwSQgpUs+JMv4LAbsvYgvMvngDcFmtUNt6iEuCWPTPlVV",
	"2FtKGtlgw4nepFfG1rhRo6pi7dApwwVXTMWvVaQir1o5F1ljgvjw55VwHtdGQxCwBj9QY+xKWAANWtTo",
	"hRKEGkVrAuUMqaE04DxgmVyDDyneWb7IF5wGHVjljCzl23yRv2WKFTURjYJD8cMKaKZb+TuQUG0rovxZ",
	"powRj2nk4UqnLR/aljfcTOsegkMbEtpvFosXNadwyp0+91UFIdR9K7bFcd/vFmfznj4hCR4t6MAS6DTS",
	"fdcpPzzVMalVYH1ErJY8tBhOoHXhQREIJSw87ALMEEvbJrZ2dj481f6B429t5FVR/hGQzxfv5lBc2bVq",
	"jRbGup5+jIrJXWR593hsDnf7+sz2lLwcl/skPknEEZFjJos+gC8e+S971ZiKbIFgXm7UZ6WsQNsO4h6E",
	"RgvifoiXWIurFXDDgmPlM9YvY9Bo9iw/rzog8CG2eZwGBNciqFEUdR/43uJ8MYaWWXJZFvHOYzctyH1P",
	"J99Dtkf8sf8vjwbpPA3SaTI3GUToebqYMKb/fH6C2xQWSdTYW/2TUkyIxax71MWfrMHJsGZuxLk/Dp+m",
	"q+zngK6BqgZ0Lm5DKuAsGi9BIGNXuXhFBl5SynHaTkg5PCnl/w77bMSckvUV/0/IzuaADeZlpXrrtHqe",
	"VE9PTx/Pv7hMDy6KV52PBIBQVsB3EzhPosDYiF+05Nkd9DyOOVWt+vYEZ6en8mAopsJOW0K6Pfx6Q1W/",
	"/Uwsi6LFSrUNBirfL94vivWZZFCnCMeV/Lb77FL32NPh18BEZLxDxuz47PWm9DCdnYrdo1+Oy/GfAAAA",
	"///wNAQs1w0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
